-- Create an Extended Events session for detailed procedure/query performance analysis
-- Replace the text with part of the query or stored proc name. Use the same text in each event. 
CREATE EVENT SESSION [QueryPerformanceanalysis] ON SERVER 
ADD EVENT sqlserver.sql_batch_completed (
    ACTION (
        sqlos.task_time,
        sqlserver.client_app_name,
        sqlserver.database_id,
        sqlserver.server_principal_name,
        sqlserver.session_id,
        sqlserver.sql_text
    )
    WHERE (
        sqlserver.sql_text LIKE N'%usp_GetOrders%' OR
        sqlserver.sql_text LIKE N'%OrderType = @OrderType%'
    )
),
ADD EVENT sqlserver.sql_statement_recompile (
    ACTION (
        sqlserver.client_app_name,
        sqlserver.database_id,
        sqlserver.session_id,
        sqlserver.sql_text
    )
    WHERE (
        sqlserver.sql_text LIKE N'%usp_GetOrders%'
    )
),
ADD EVENT sqlserver.sp_statement_completed (
    ACTION (
        sqlserver.session_id,
        sqlserver.sql_text,
        sqlserver.client_app_name,
        sqlserver.database_id
    )
    WHERE (
        sqlserver.sql_text LIKE N'%usp_GetOrders%'
    )
),
ADD EVENT sqlserver.query_post_compilation_showplan (
    ACTION (
        sqlserver.sql_text,
        sqlserver.session_id,
        sqlserver.client_app_name,
        sqlserver.database_id
    )
    WHERE (
        sqlserver.sql_text LIKE N'%usp_GetOrders%'
    )
)
ADD TARGET package0.event_file (
    SET filename = N'QueryPerformanceanalysis.xel',
        max_file_size = 10MB,
        max_rollover_files = 5
)
WITH (
    MAX_MEMORY = 4096 KB,
    EVENT_RETENTION_MODE = ALLOW_SINGLE_EVENT_LOSS,
    MAX_DISPATCH_LATENCY = 30 SECONDS,
    MAX_EVENT_SIZE = 0 KB,
    MEMORY_PARTITION_MODE = NONE,
    TRACK_CAUSALITY = OFF,
    STARTUP_STATE = ON
);
GO

-- Start the session
ALTER EVENT SESSION [QueryPerformanceanalysis] ON SERVER  
STATE = START;
GO



===================================================================================================================================================
===================================================================================================================================================
 WITH EventsCTE AS (
    SELECT
        X.value('(@name)[1]', 'varchar(50)') AS event_name,
        X.value('(*:data[@name="cpu_time"]/*:value)[1]', 'bigint') AS cpu_time_us,
        X.value('(*:data[@name="logical_reads"]/*:value)[1]', 'bigint') AS logical_reads,
        X.value('(*:data[@name="writes"]/*:value)[1]', 'bigint') AS writes,
        X.value('(*:data[@name="duration"]/*:value)[1]', 'bigint') AS duration_us,
        X.value('(*:action[@name="session_id"]/*:value)[1]', 'int') AS session_id,
        X.value('(*:action[@name="sql_text"]/*:value)[1]', 'nvarchar(max)') AS sql_text,
        X.value('(@timestamp)[1]', 'datetime2') AS event_time,
        CASE WHEN X.value('(@name)[1]', 'varchar(50)') IN ('sql_statement_recompile', 'query_post_compilation_showplan') THEN 1 ELSE 0 END AS is_compile_or_recompile
    FROM (
        SELECT CAST(event_data AS XML) AS event_data
        FROM sys.fn_xe_file_target_read_file('QueryPerformanceCapture*.xel', NULL, NULL, NULL)
    ) AS RawXE
    CROSS APPLY event_data.nodes('/*:event') AS T(X)
    WHERE X.value('(@name)[1]', 'varchar(50)') IN ('sp_statement_completed', 'sql_statement_recompile', 'query_post_compilation_showplan')
      AND X.value('(*:action[@name="sql_text"]/*:value)[1]', 'nvarchar(max)') NOT LIKE '%dm_xe_objects%'
      AND X.value('(*:action[@name="sql_text"]/*:value)[1]', 'nvarchar(max)') NOT LIKE '%sys.server_event_sessions%'
)
SELECT
    comp.event_name,
    comp.session_id,
    comp.event_time,
    comp.sql_text,
    comp.cpu_time_us,
    comp.logical_reads,
    comp.writes,
    comp.duration_us,
    CASE WHEN comp.is_compile_or_recompile = 1 THEN 'Yes' ELSE 'No' END AS compile_or_recompile
FROM EventsCTE comp
WHERE (comp.[sql_text] LIKE N'%WHERE OrderType = @Type%') 
--and event_name = 'sp_statement_completed'
ORDER BY comp.event_time DESC;
